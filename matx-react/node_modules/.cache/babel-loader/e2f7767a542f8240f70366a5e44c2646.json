{"ast":null,"code":"import Mock from '../mock';\nimport * as _ from 'lodash';\nconst TodoDB = {\n  todo: [{\n    id: 1,\n    title: 'API problem',\n    note: 'API is malfunctioning. kindly fix it',\n    important: true,\n    starred: true,\n    done: false,\n    read: false,\n    selected: false,\n    startDate: new Date().toISOString(),\n    dueDate: new Date().toISOString(),\n    tag: [1, 2]\n  }, {\n    id: 2,\n    title: 'Mobile problem',\n    note: 'Mobile is malfunctioning. fix it',\n    important: false,\n    starred: false,\n    done: true,\n    read: true,\n    selected: false,\n    startDate: new Date().toISOString(),\n    dueDate: new Date().toISOString(),\n    tag: [2]\n  }, {\n    id: 3,\n    title: 'API problem',\n    note: 'API is malfunctioning. fix it',\n    important: false,\n    starred: false,\n    done: true,\n    read: false,\n    selected: false,\n    startDate: new Date().toISOString(),\n    dueDate: new Date().toISOString(),\n    tag: [1]\n  }, {\n    id: 4,\n    title: 'API problem',\n    note: 'API is malfunctioning. fix it',\n    important: false,\n    starred: false,\n    done: false,\n    read: true,\n    selected: false,\n    startDate: new Date().toISOString(),\n    dueDate: new Date().toISOString(),\n    tag: [1, 2, 3]\n  }, {\n    id: 5,\n    title: 'API problem',\n    note: 'API is malfunctioning. fix it',\n    important: false,\n    starred: false,\n    done: true,\n    read: false,\n    selected: false,\n    startDate: new Date().toISOString(),\n    dueDate: new Date().toISOString(),\n    tag: [1]\n  }],\n  tag: [{\n    id: 1,\n    name: 'frontend'\n  }, {\n    id: 2,\n    name: 'backend'\n  }, {\n    id: 3,\n    name: 'API'\n  }, {\n    id: 4,\n    name: 'issue'\n  }, {\n    id: 5,\n    name: 'mobile'\n  }]\n};\nMock.onGet('/api/todo/all').reply(config => {\n  const response = TodoDB.todo;\n  return [200, response];\n});\nMock.onGet('/api/todo/tag').reply(config => {\n  const response = TodoDB.tag;\n  return [200, response];\n});\nMock.onGet('/api/todo').reply(config => {\n  const id = parseInt(config.data);\n  const response = TodoDB.todo.find(todo => todo.id === id);\n  return [200, response];\n});\nMock.onPost('/api/todo/reorder').reply(config => {\n  let {\n    todoList\n  } = JSON.parse(config.data);\n  TodoDB.todo = [...todoList];\n  let response = TodoDB.todo;\n  return [200, response];\n});\nMock.onPost('/api/todo/add').reply(config => {\n  let {\n    todo\n  } = JSON.parse(config.data);\n  TodoDB.todo.push({ ...todo\n  });\n  let response = TodoDB.todo;\n  return [200, response];\n});\nMock.onPost('/api/todo/tag/add').reply(config => {\n  let {\n    tag\n  } = JSON.parse(config.data);\n  TodoDB.tag.push({ ...tag\n  });\n  return [200, tag];\n});\nMock.onPost('/api/todo/update').reply(config => {\n  let {\n    todo\n  } = JSON.parse(config.data);\n  TodoDB.todo.map((t, index) => {\n    if (t.id === todo.id) {\n      TodoDB.todo[index] = { ...todo\n      };\n    }\n\n    return 'dummy value';\n  });\n  return [200, todo];\n});\nMock.onPost('/api/todo/delete').reply(config => {\n  let {\n    todo\n  } = JSON.parse(config.data);\n\n  _.remove(TodoDB.todo, t => t.id === todo.id);\n\n  let response = TodoDB.todo;\n  return [200, response];\n});\nMock.onPost('/api/todo/tag/delete').reply(config => {\n  let {\n    tag\n  } = JSON.parse(config.data);\n\n  _.remove(TodoDB.tag, t => t.id === tag.id);\n\n  let response = TodoDB.tag;\n  return [200, response];\n}); // Mock.onPost(\"/api/chat/create-chat-room\").reply(config => {\n//   let data = JSON.parse(config.data);\n//   let { id, chatId, ...rest } = data;\n//   ChatDB.user.map(user => {\n//     if (id === user.id) {\n//       user.chatInfo.push({ chatId, ...rest });\n//     }\n//   });\n//   ChatDB.chatCollection.push({\n//     id: chatId,\n//     chats: []\n//   });\n//   let temp;\n//   let response = ChatDB.user\n//     .find(user => user.id === id)\n//     .chatInfo.map(contact => {\n//       temp = ChatDB.contacts.find(user => user.id === contact.contactId);\n//       return { ...temp, ...contact };\n//     });\n//   response = _.orderBy(response, [\"lastChatTime\"], [\"desc\"]);\n//   console.log(response);\n//   return [200, response];\n// });","map":{"version":3,"sources":["/home/harryji/react/matx-react/src/fake-db/db/todos.js"],"names":["Mock","_","TodoDB","todo","id","title","note","important","starred","done","read","selected","startDate","Date","toISOString","dueDate","tag","name","onGet","reply","config","response","parseInt","data","find","onPost","todoList","JSON","parse","push","map","t","index","remove"],"mappings":"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","sourcesContent":["import Mock from '../mock'\nimport * as _ from 'lodash'\n\nconst TodoDB = {\n    todo: [\n        {\n            id: 1,\n            title: 'API problem',\n            note: 'API is malfunctioning. kindly fix it',\n            important: true,\n            starred: true,\n            done: false,\n            read: false,\n            selected: false,\n            startDate: new Date().toISOString(),\n            dueDate: new Date().toISOString(),\n\n            tag: [1, 2],\n        },\n        {\n            id: 2,\n            title: 'Mobile problem',\n            note: 'Mobile is malfunctioning. fix it',\n            important: false,\n            starred: false,\n            done: true,\n            read: true,\n            selected: false,\n            startDate: new Date().toISOString(),\n            dueDate: new Date().toISOString(),\n\n            tag: [2],\n        },\n        {\n            id: 3,\n            title: 'API problem',\n            note: 'API is malfunctioning. fix it',\n            important: false,\n            starred: false,\n            done: true,\n            read: false,\n            selected: false,\n            startDate: new Date().toISOString(),\n            dueDate: new Date().toISOString(),\n\n            tag: [1],\n        },\n        {\n            id: 4,\n            title: 'API problem',\n            note: 'API is malfunctioning. fix it',\n            important: false,\n            starred: false,\n            done: false,\n            read: true,\n            selected: false,\n            startDate: new Date().toISOString(),\n            dueDate: new Date().toISOString(),\n\n            tag: [1, 2, 3],\n        },\n        {\n            id: 5,\n            title: 'API problem',\n            note: 'API is malfunctioning. fix it',\n            important: false,\n            starred: false,\n            done: true,\n            read: false,\n            selected: false,\n            startDate: new Date().toISOString(),\n            dueDate: new Date().toISOString(),\n\n            tag: [1],\n        },\n    ],\n\n    tag: [\n        {\n            id: 1,\n            name: 'frontend',\n        },\n        {\n            id: 2,\n            name: 'backend',\n        },\n        {\n            id: 3,\n            name: 'API',\n        },\n        {\n            id: 4,\n            name: 'issue',\n        },\n        {\n            id: 5,\n            name: 'mobile',\n        },\n    ],\n}\n\nMock.onGet('/api/todo/all').reply((config) => {\n    const response = TodoDB.todo\n    return [200, response]\n})\n\nMock.onGet('/api/todo/tag').reply((config) => {\n    const response = TodoDB.tag\n    return [200, response]\n})\n\nMock.onGet('/api/todo').reply((config) => {\n    const id = parseInt(config.data)\n\n    const response = TodoDB.todo.find((todo) => todo.id === id)\n    return [200, response]\n})\n\nMock.onPost('/api/todo/reorder').reply((config) => {\n    let { todoList } = JSON.parse(config.data)\n\n    TodoDB.todo = [...todoList]\n    let response = TodoDB.todo\n    return [200, response]\n})\n\nMock.onPost('/api/todo/add').reply((config) => {\n    let { todo } = JSON.parse(config.data)\n    TodoDB.todo.push({ ...todo })\n    let response = TodoDB.todo\n    return [200, response]\n})\n\nMock.onPost('/api/todo/tag/add').reply((config) => {\n    let { tag } = JSON.parse(config.data)\n    TodoDB.tag.push({ ...tag })\n    return [200, tag]\n})\n\nMock.onPost('/api/todo/update').reply((config) => {\n    let { todo } = JSON.parse(config.data)\n\n    TodoDB.todo.map((t, index) => {\n        if (t.id === todo.id) {\n            TodoDB.todo[index] = { ...todo }\n        }\n        return 'dummy value'\n    })\n\n    return [200, todo]\n})\n\nMock.onPost('/api/todo/delete').reply((config) => {\n    let { todo } = JSON.parse(config.data)\n    _.remove(TodoDB.todo, (t) => t.id === todo.id)\n    let response = TodoDB.todo\n    return [200, response]\n})\n\nMock.onPost('/api/todo/tag/delete').reply((config) => {\n    let { tag } = JSON.parse(config.data)\n    _.remove(TodoDB.tag, (t) => t.id === tag.id)\n    let response = TodoDB.tag\n    return [200, response]\n})\n\n// Mock.onPost(\"/api/chat/create-chat-room\").reply(config => {\n//   let data = JSON.parse(config.data);\n//   let { id, chatId, ...rest } = data;\n//   ChatDB.user.map(user => {\n//     if (id === user.id) {\n//       user.chatInfo.push({ chatId, ...rest });\n//     }\n//   });\n//   ChatDB.chatCollection.push({\n//     id: chatId,\n//     chats: []\n//   });\n\n//   let temp;\n//   let response = ChatDB.user\n//     .find(user => user.id === id)\n//     .chatInfo.map(contact => {\n//       temp = ChatDB.contacts.find(user => user.id === contact.contactId);\n//       return { ...temp, ...contact };\n//     });\n//   response = _.orderBy(response, [\"lastChatTime\"], [\"desc\"]);\n//   console.log(response);\n\n//   return [200, response];\n// });\n"]},"metadata":{},"sourceType":"module"}