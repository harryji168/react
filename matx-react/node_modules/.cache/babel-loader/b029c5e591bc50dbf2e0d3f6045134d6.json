{"ast":null,"code":"var _jsxFileName = \"/home/harryji/react/matx-react/src/app/views/material-kit/snackbar/CustomizedSnackbar.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600]\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main\n  },\n  warning: {\n    backgroundColor: amber[700]\n  },\n  icon: {\n    fontSize: 20\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1)\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n}));\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles1();\n  const {\n    className,\n    message,\n    onClose,\n    variant,\n    ...other\n  } = props;\n  const Icon = variantIcon[variant];\n  return /*#__PURE__*/React.createElement(SnackbarContent, Object.assign({\n    className: clsx(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: /*#__PURE__*/React.createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      className: clsx(classes.icon, classes.iconVariant),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }), message),\n    action: [/*#__PURE__*/React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"Close\",\n      color: \"inherit\",\n      onClick: onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      className: classes.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }))]\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }));\n}\n\nMySnackbarContentWrapper.propTypes = {\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired\n};\nconst useStyles2 = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\nexport default function CustomizedSnackbars() {\n  const classes = useStyles2();\n  const [open, setOpen] = React.useState(false);\n\n  function handleClick() {\n    setOpen(true);\n  }\n\n  function handleClose(event, reason) {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    className: classes.margin,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \"Open success snackbar\"), /*#__PURE__*/React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'left'\n    },\n    open: open,\n    autoHideDuration: 6000,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MySnackbarContentWrapper, {\n    onClose: handleClose,\n    variant: \"success\",\n    message: \"This is a success message!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(MySnackbarContentWrapper, {\n    variant: \"error\",\n    className: classes.margin,\n    message: \"This is an error message!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MySnackbarContentWrapper, {\n    variant: \"warning\",\n    className: classes.margin,\n    message: \"This is a warning message!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MySnackbarContentWrapper, {\n    variant: \"info\",\n    className: classes.margin,\n    message: \"This is an information message!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MySnackbarContentWrapper, {\n    variant: \"success\",\n    className: classes.margin,\n    message: \"This is a success message!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/home/harryji/react/matx-react/src/app/views/material-kit/snackbar/CustomizedSnackbar.jsx"],"names":["React","PropTypes","clsx","Button","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","amber","green","IconButton","Snackbar","SnackbarContent","WarningIcon","makeStyles","variantIcon","success","warning","error","info","useStyles1","theme","backgroundColor","palette","dark","primary","main","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","MySnackbarContentWrapper","props","classes","className","onClose","variant","other","Icon","propTypes","string","node","func","oneOf","isRequired","useStyles2","margin","CustomizedSnackbars","open","setOpen","useState","handleClick","handleClose","event","reason","vertical","horizontal"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport Button from '@material-ui/core/Button'\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle'\nimport ErrorIcon from '@material-ui/icons/Error'\nimport InfoIcon from '@material-ui/icons/Info'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { amber, green } from '@material-ui/core/colors'\nimport IconButton from '@material-ui/core/IconButton'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\nimport WarningIcon from '@material-ui/icons/Warning'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n}\n\nconst useStyles1 = makeStyles((theme) => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}))\n\nfunction MySnackbarContentWrapper(props) {\n    const classes = useStyles1()\n    const { className, message, onClose, variant, ...other } = props\n    const Icon = variantIcon[variant]\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                    {message}\n                </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"Close\"\n                    color=\"inherit\"\n                    onClick={onClose}\n                >\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    )\n}\n\nMySnackbarContentWrapper.propTypes = {\n    className: PropTypes.string,\n    message: PropTypes.node,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info'])\n        .isRequired,\n}\n\nconst useStyles2 = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}))\n\nexport default function CustomizedSnackbars() {\n    const classes = useStyles2()\n    const [open, setOpen] = React.useState(false)\n\n    function handleClick() {\n        setOpen(true)\n    }\n\n    function handleClose(event, reason) {\n        if (reason === 'clickaway') {\n            return\n        }\n\n        setOpen(false)\n    }\n\n    return (\n        <div>\n            <Button\n                variant=\"outlined\"\n                className={classes.margin}\n                onClick={handleClick}\n            >\n                Open success snackbar\n            </Button>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={open}\n                autoHideDuration={6000}\n                onClose={handleClose}\n            >\n                <MySnackbarContentWrapper\n                    onClose={handleClose}\n                    variant=\"success\"\n                    message=\"This is a success message!\"\n                />\n            </Snackbar>\n            <MySnackbarContentWrapper\n                variant=\"error\"\n                className={classes.margin}\n                message=\"This is an error message!\"\n            />\n            <MySnackbarContentWrapper\n                variant=\"warning\"\n                className={classes.margin}\n                message=\"This is a warning message!\"\n            />\n            <MySnackbarContentWrapper\n                variant=\"info\"\n                className={classes.margin}\n                message=\"This is an information message!\"\n            />\n            <MySnackbarContentWrapper\n                variant=\"success\"\n                className={classes.margin}\n                message=\"This is a success message!\"\n            />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}