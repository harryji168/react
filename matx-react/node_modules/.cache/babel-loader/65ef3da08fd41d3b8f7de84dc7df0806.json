{"ast":null,"code":"var _jsxFileName = \"/home/harryji/react/matx-react/src/app/components/MatxLayout/Layout1/Layout1Sidenav.jsx\";\nimport React from 'react';\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\nimport Sidenav from '../../Sidenav/Sidenav';\nimport Brand from '../../Brand/Brand';\nimport { Switch, Hidden } from '@material-ui/core';\nimport { convertHexToRGB } from 'utils';\nimport useSettings from 'app/hooks/useSettings';\nconst useStyles = makeStyles(_ref => {\n  let {\n    palette,\n    ...theme\n  } = _ref;\n  return {\n    sidenav: _ref2 => {\n      let {\n        width,\n        primaryRGB,\n        bgImgURL\n      } = _ref2;\n      return {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        height: '100vh',\n        width: width,\n        boxShadow: theme.shadows[8],\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'top',\n        backgroundSize: 'cover',\n        zIndex: 111,\n        overflow: 'hidden',\n        color: palette.text.primary,\n        transition: 'all 250ms ease-in-out',\n        backgroundImage: \"linear-gradient(to bottom, rgba(\".concat(primaryRGB, \", 0.96), rgba(\").concat(primaryRGB, \", 0.96)), url(\").concat(bgImgURL, \")\"),\n        '&:hover': {\n          width: 'var(--sidenav-width)',\n          '& .sidenavHoverShow': {\n            display: 'block'\n          },\n          '& .compactNavItem': {\n            width: '100%',\n            maxWidth: '100%',\n            '& .nav-bullet': {\n              display: 'block'\n            },\n            '& .nav-bullet-text': {\n              display: 'none'\n            }\n          }\n        }\n      };\n    },\n    hideOnCompact: {\n      display: 'none'\n    },\n    userInfo: {}\n  };\n});\n\nconst Layout1Sidenav = () => {\n  const theme = useTheme();\n  const {\n    settings,\n    updateSettings\n  } = useSettings();\n  const leftSidebar = settings.layout1Settings.leftSidebar;\n  const {\n    mode\n  } = leftSidebar;\n\n  const getSidenavWidth = () => {\n    switch (mode) {\n      case 'compact':\n        return 'var(--sidenav-compact-width)';\n\n      default:\n        return 'var(--sidenav-width)';\n    }\n  };\n\n  const primaryRGB = convertHexToRGB(theme.palette.primary.main);\n  const classes = useStyles({ ...leftSidebar,\n    width: getSidenavWidth(),\n    primaryRGB\n  });\n\n  const updateSidebarMode = sidebarSettings => {\n    updateSettings({\n      layout1Settings: {\n        leftSidebar: { ...sidebarSettings\n        }\n      }\n    });\n  };\n\n  const handleSidenavToggle = () => {\n    updateSidebarMode({\n      mode: mode === 'compact' ? 'full' : 'compact'\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.sidenav,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-column relative h-full\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Brand, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Hidden, {\n    smDown: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    onChange: handleSidenavToggle,\n    checked: leftSidebar.mode !== 'full',\n    color: \"secondary\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Sidenav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default React.memo(Layout1Sidenav);","map":{"version":3,"sources":["/home/harryji/react/matx-react/src/app/components/MatxLayout/Layout1/Layout1Sidenav.jsx"],"names":["React","useTheme","makeStyles","Sidenav","Brand","Switch","Hidden","convertHexToRGB","useSettings","useStyles","palette","theme","sidenav","width","primaryRGB","bgImgURL","position","top","left","height","boxShadow","shadows","backgroundRepeat","backgroundPosition","backgroundSize","zIndex","overflow","color","text","primary","transition","backgroundImage","display","maxWidth","hideOnCompact","userInfo","Layout1Sidenav","settings","updateSettings","leftSidebar","layout1Settings","mode","getSidenavWidth","main","classes","updateSidebarMode","sidebarSettings","handleSidenavToggle","memo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useTheme, makeStyles } from '@material-ui/core/styles'\n\nimport Sidenav from '../../Sidenav/Sidenav'\nimport Brand from '../../Brand/Brand'\nimport { Switch, Hidden } from '@material-ui/core'\nimport { convertHexToRGB } from 'utils'\nimport useSettings from 'app/hooks/useSettings'\n\nconst useStyles = makeStyles(({ palette, ...theme }) => ({\n    sidenav: ({ width, primaryRGB, bgImgURL }) => ({\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        height: '100vh',\n        width: width,\n        boxShadow: theme.shadows[8],\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'top',\n        backgroundSize: 'cover',\n        zIndex: 111,\n        overflow: 'hidden',\n        color: palette.text.primary,\n        transition: 'all 250ms ease-in-out',\n        backgroundImage: `linear-gradient(to bottom, rgba(${primaryRGB}, 0.96), rgba(${primaryRGB}, 0.96)), url(${bgImgURL})`,\n        '&:hover': {\n            width: 'var(--sidenav-width)',\n            '& .sidenavHoverShow': {\n                display: 'block',\n            },\n            '& .compactNavItem': {\n                width: '100%',\n                maxWidth: '100%',\n                '& .nav-bullet': {\n                    display: 'block',\n                },\n                '& .nav-bullet-text': {\n                    display: 'none',\n                },\n            },\n        },\n    }),\n    hideOnCompact: {\n        display: 'none',\n    },\n    userInfo: {},\n}))\n\nconst Layout1Sidenav = () => {\n    const theme = useTheme()\n\n    const { settings, updateSettings } = useSettings()\n\n    const leftSidebar = settings.layout1Settings.leftSidebar\n    const { mode } = leftSidebar\n\n    const getSidenavWidth = () => {\n        switch (mode) {\n            case 'compact':\n                return 'var(--sidenav-compact-width)'\n            default:\n                return 'var(--sidenav-width)'\n        }\n    }\n\n    const primaryRGB = convertHexToRGB(theme.palette.primary.main)\n    const classes = useStyles({\n        ...leftSidebar,\n        width: getSidenavWidth(),\n        primaryRGB,\n    })\n\n    const updateSidebarMode = (sidebarSettings) => {\n        updateSettings({\n            layout1Settings: {\n                leftSidebar: {\n                    ...sidebarSettings,\n                },\n            },\n        })\n    }\n\n    const handleSidenavToggle = () => {\n        updateSidebarMode({ mode: mode === 'compact' ? 'full' : 'compact' })\n    }\n\n    return (\n        <div className={classes.sidenav}>\n            <div className=\"flex-column relative h-full\">\n                <Brand>\n                    <Hidden smDown>\n                        <Switch\n                            onChange={handleSidenavToggle}\n                            checked={leftSidebar.mode !== 'full'}\n                            color=\"secondary\"\n                            size=\"small\"\n                        />\n                    </Hidden>\n                </Brand>\n                <Sidenav />\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(Layout1Sidenav)\n"]},"metadata":{},"sourceType":"module"}