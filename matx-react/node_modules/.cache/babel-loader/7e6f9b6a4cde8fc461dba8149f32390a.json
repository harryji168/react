{"ast":null,"code":"var _jsxFileName = \"/home/harryji/react/matx-react/src/app/views/Drag&Drop/SimpleListDnD.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // fake data generator\n\nconst getItems = count => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: \"item-\".concat(k),\n  content: \"item \".concat(k)\n})); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: \"0 0 \".concat(grid, \"px 0\"),\n  boxShadow: 'var(--elevation-z4)',\n  borderRadius: '4px',\n  // change background colour if dragging\n  background: isDragging ? 'var(--primary)' : 'var(--bg-paper)',\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  borderRadius: '4px',\n  background: isDraggingOver ? 'rgba(0,0,0, .1)' : 'var(--bg-default)',\n  padding: grid,\n  width: 250\n});\n\nconst SimpleListDnD = () => {\n  const [item, setItem] = useState([]);\n  useEffect(() => {\n    setItem(getItems(6));\n  }, []);\n\n  const onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const tempItems = reorder(item, result.source.index, result.destination.index);\n    setItem(tempItems);\n  };\n\n  return /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"droppable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, provided.droppableProps, {\n    ref: provided.innerRef,\n    style: getListStyle(snapshot.isDraggingOver),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }), item.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 29\n    }\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 37\n    }\n  }), item.content))), provided.placeholder)));\n};\n\nexport default SimpleListDnD;","map":{"version":3,"sources":["/home/harryji/react/matx-react/src/app/views/Drag&Drop/SimpleListDnD.jsx"],"names":["React","useState","useEffect","DragDropContext","Droppable","Draggable","getItems","count","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","removed","splice","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","boxShadow","borderRadius","background","getListStyle","isDraggingOver","width","SimpleListDnD","item","setItem","onDragEnd","destination","tempItems","source","index","provided","snapshot","droppableProps","innerRef","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\n// fake data generator\nconst getItems = (count) =>\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\n        id: `item-${k}`,\n        content: `item ${k}`,\n    }))\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list)\n    const [removed] = result.splice(startIndex, 1)\n    result.splice(endIndex, 0, removed)\n\n    return result\n}\n\nconst grid = 8\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n    boxShadow: 'var(--elevation-z4)',\n    borderRadius: '4px',\n    // change background colour if dragging\n    background: isDragging ? 'var(--primary)' : 'var(--bg-paper)',\n\n    // styles we need to apply on draggables\n    ...draggableStyle,\n})\n\nconst getListStyle = (isDraggingOver) => ({\n    borderRadius: '4px',\n    background: isDraggingOver ? 'rgba(0,0,0, .1)' : 'var(--bg-default)',\n    padding: grid,\n    width: 250,\n})\n\nconst SimpleListDnD = () => {\n    const [item, setItem] = useState([])\n\n    useEffect(() => {\n        setItem(getItems(6))\n    }, [])\n\n    const onDragEnd = (result) => {\n        // dropped outside the list\n        if (!result.destination) {\n            return\n        }\n\n        const tempItems = reorder(\n            item,\n            result.source.index,\n            result.destination.index\n        )\n        setItem(tempItems)\n    }\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n                {(provided, snapshot) => (\n                    <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={getListStyle(snapshot.isDraggingOver)}\n                    >\n                        {item.map((item, index) => (\n                            <Draggable\n                                key={item.id}\n                                draggableId={item.id}\n                                index={index}\n                            >\n                                {(provided, snapshot) => (\n                                    <div\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                        style={getItemStyle(\n                                            snapshot.isDragging,\n                                            provided.draggableProps.style\n                                        )}\n                                    >\n                                        {item.content}\n                                    </div>\n                                )}\n                            </Draggable>\n                        ))}\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        </DragDropContext>\n    )\n}\n\nexport default SimpleListDnD\n"]},"metadata":{},"sourceType":"module"}