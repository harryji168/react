{"ast":null,"code":"var _jsxFileName = \"/home/harryji/react/matx-react/src/app/components/ChatHead/ChatHead.jsx\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport { cloneElement } from 'react';\nconst useStyles = makeStyles(_ref => {\n  let {\n    palette,\n    ...theme\n  } = _ref;\n  return {\n    popup: {\n      position: 'fixed',\n      right: theme.spacing(2),\n      bottom: theme.spacing(2),\n      top: '100vh',\n      transition: 'top 250ms ease-in-out',\n      boxShadow: theme.shadows[6],\n      borderRadius: 6,\n      zIndex: 99999,\n      width: 360,\n      overflow: 'hidden',\n      '@media only screen and (max-width: 450px)': {\n        width: 'calc(100% - 32px)',\n        left: theme.spacing(2)\n      }\n    },\n    popupOpen: {\n      top: 'calc(var(--topbar-height) + 16px)',\n      [theme.breakpoints.down('sm')]: {\n        bottom: 0\n      }\n    },\n    closeIcon: {\n      position: 'absolute',\n      top: 6,\n      right: 6\n    }\n  };\n});\n\nconst ChatHead = _ref2 => {\n  let {\n    icon,\n    children\n  } = _ref2;\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const togglePopup = async () => {\n    setOpen(open => !open);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, cloneElement(icon, {\n    onClick: togglePopup\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx({\n      'bg-paper': true,\n      [classes.popup]: true,\n      [classes.popupOpen]: open\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, open ? cloneElement(children, {\n    togglePopup\n  }) : null));\n};\n\nexport default ChatHead;","map":{"version":3,"sources":["/home/harryji/react/matx-react/src/app/components/ChatHead/ChatHead.jsx"],"names":["React","useState","makeStyles","clsx","cloneElement","useStyles","palette","theme","popup","position","right","spacing","bottom","top","transition","boxShadow","shadows","borderRadius","zIndex","width","overflow","left","popupOpen","breakpoints","down","closeIcon","ChatHead","icon","children","classes","open","setOpen","togglePopup","onClick"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,YAAT,QAA6B,OAA7B;AAEA,MAAMC,SAAS,GAAGH,UAAU,CAAC;AAAA,MAAC;AAAEI,IAAAA,OAAF;AAAW,OAAGC;AAAd,GAAD;AAAA,SAA4B;AACrDC,IAAAA,KAAK,EAAE;AACHC,MAAAA,QAAQ,EAAE,OADP;AAEHC,MAAAA,KAAK,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,CAFJ;AAGHC,MAAAA,MAAM,EAAEL,KAAK,CAACI,OAAN,CAAc,CAAd,CAHL;AAIHE,MAAAA,GAAG,EAAE,OAJF;AAKHC,MAAAA,UAAU,EAAE,uBALT;AAMHC,MAAAA,SAAS,EAAER,KAAK,CAACS,OAAN,CAAc,CAAd,CANR;AAOHC,MAAAA,YAAY,EAAE,CAPX;AAQHC,MAAAA,MAAM,EAAE,KARL;AASHC,MAAAA,KAAK,EAAE,GATJ;AAUHC,MAAAA,QAAQ,EAAE,QAVP;AAWH,mDAA6C;AACzCD,QAAAA,KAAK,EAAE,mBADkC;AAEzCE,QAAAA,IAAI,EAAEd,KAAK,CAACI,OAAN,CAAc,CAAd;AAFmC;AAX1C,KAD8C;AAiBrDW,IAAAA,SAAS,EAAE;AACPT,MAAAA,GAAG,EAAE,mCADE;AAEP,OAACN,KAAK,CAACgB,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAgC;AAC5BZ,QAAAA,MAAM,EAAE;AADoB;AAFzB,KAjB0C;AAuBrDa,IAAAA,SAAS,EAAE;AACPhB,MAAAA,QAAQ,EAAE,UADH;AAEPI,MAAAA,GAAG,EAAE,CAFE;AAGPH,MAAAA,KAAK,EAAE;AAHA;AAvB0C,GAA5B;AAAA,CAAD,CAA5B;;AA8BA,MAAMgB,QAAQ,GAAG,SAAwB;AAAA,MAAvB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAuB;AACrC,QAAMC,OAAO,GAAGxB,SAAS,EAAzB;AACA,QAAM,CAACyB,IAAD,EAAOC,OAAP,IAAkB9B,QAAQ,CAAC,KAAD,CAAhC;;AAEA,QAAM+B,WAAW,GAAG,YAAY;AAC5BD,IAAAA,OAAO,CAAED,IAAD,IAAU,CAACA,IAAZ,CAAP;AACH,GAFD;;AAIA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK1B,YAAY,CAACuB,IAAD,EAAO;AAAEM,IAAAA,OAAO,EAAED;AAAX,GAAP,CADjB,eAEI;AACI,IAAA,SAAS,EAAE7B,IAAI,CAAC;AACZ,kBAAY,IADA;AAEZ,OAAC0B,OAAO,CAACrB,KAAT,GAAiB,IAFL;AAGZ,OAACqB,OAAO,CAACP,SAAT,GAAqBQ;AAHT,KAAD,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKA,IAAI,GAAG1B,YAAY,CAACwB,QAAD,EAAW;AAAEI,IAAAA;AAAF,GAAX,CAAf,GAA6C,IAPtD,CAFJ,CADJ;AAcH,CAtBD;;AAwBA,eAAeN,QAAf","sourcesContent":["import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport { cloneElement } from 'react'\n\nconst useStyles = makeStyles(({ palette, ...theme }) => ({\n    popup: {\n        position: 'fixed',\n        right: theme.spacing(2),\n        bottom: theme.spacing(2),\n        top: '100vh',\n        transition: 'top 250ms ease-in-out',\n        boxShadow: theme.shadows[6],\n        borderRadius: 6,\n        zIndex: 99999,\n        width: 360,\n        overflow: 'hidden',\n        '@media only screen and (max-width: 450px)': {\n            width: 'calc(100% - 32px)',\n            left: theme.spacing(2),\n        },\n    },\n    popupOpen: {\n        top: 'calc(var(--topbar-height) + 16px)',\n        [theme.breakpoints.down('sm')]: {\n            bottom: 0,\n        },\n    },\n    closeIcon: {\n        position: 'absolute',\n        top: 6,\n        right: 6,\n    },\n}))\n\nconst ChatHead = ({ icon, children }) => {\n    const classes = useStyles()\n    const [open, setOpen] = useState(false)\n\n    const togglePopup = async () => {\n        setOpen((open) => !open)\n    }\n\n    return (\n        <div>\n            {cloneElement(icon, { onClick: togglePopup })}\n            <div\n                className={clsx({\n                    'bg-paper': true,\n                    [classes.popup]: true,\n                    [classes.popupOpen]: open,\n                })}\n            >\n                {open ? cloneElement(children, { togglePopup }) : null}\n            </div>\n        </div>\n    )\n}\n\nexport default ChatHead\n"]},"metadata":{},"sourceType":"module"}