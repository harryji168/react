{"ast":null,"code":"var _jsxFileName = \"/home/harryji/react/matx-react/src/app/components/MatxVerticalNav/MatxVerticalNav.jsx\";\nimport React, { Fragment } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Icon } from '@material-ui/core';\nimport TouchRipple from '@material-ui/core/ButtonBase';\nimport MatxVerticalNavExpansionPanel from './MatxVerticalNavExpansionPanel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport useSettings from 'app/hooks/useSettings';\nconst useStyles = makeStyles(_ref => {\n  let {\n    palette,\n    ...theme\n  } = _ref;\n  return {\n    navItem: {\n      transition: 'all 150ms ease-in',\n      '&:hover': {\n        backgroundColor: palette.action.hover\n      }\n    },\n    navItemActive: {\n      backgroundColor: palette.action.selected\n    },\n    compactNavItem: {\n      overflow: 'hidden',\n      justifyContent: 'center !important',\n      '& $itemText': {\n        display: 'none'\n      },\n      '& $itemIcon': {\n        display: 'none'\n      }\n    },\n    itemIcon: {},\n    itemText: {\n      fontSize: '0.875rem',\n      paddingLeft: '0.8rem'\n    },\n    label: {\n      color: palette.text.secondary\n    },\n    bulletIcon: {\n      background: palette.text.secondary\n    }\n  };\n});\n\nconst MatxVerticalNav = _ref2 => {\n  let {\n    items\n  } = _ref2;\n  const {\n    settings\n  } = useSettings();\n  const {\n    mode\n  } = settings.layout1Settings.leftSidebar;\n  const classes = useStyles();\n\n  const renderLevels = data => {\n    return data.map((item, index) => {\n      if (item.type === 'label') return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        className: clsx({\n          'px-4 mb-2 mt-6 uppercase text-12 sidenavHoverShow': true,\n          [classes.label]: true,\n          hidden: mode === 'compact'\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }\n      }, item.label);\n\n      if (item.children) {\n        return /*#__PURE__*/React.createElement(MatxVerticalNavExpansionPanel, {\n          mode: mode,\n          item: item,\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }\n        }, renderLevels(item.children));\n      } else if (item.type === 'extLink') {\n        return /*#__PURE__*/React.createElement(\"a\", {\n          key: index,\n          href: item.path,\n          className: clsx({\n            'flex justify-between h-44 border-radius-4 mb-2 compactNavItem whitespace-pre overflow-hidden': true,\n            [classes.navItem]: true,\n            [classes.compactNavItem]: mode === 'compact'\n          }),\n          rel: \"noopener noreferrer\",\n          target: \"_blank\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(TouchRipple, {\n          key: item.name,\n          name: \"child\",\n          className: \"w-full\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }\n        }, (() => {\n          if (item.icon) {\n            return /*#__PURE__*/React.createElement(Icon, {\n              className: \"text-18 align-middle px-4\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 41\n              }\n            }, item.icon);\n          } else {\n            return /*#__PURE__*/React.createElement(\"span\", {\n              className: \"item-icon icon-text\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 41\n              }\n            }, item.iconText);\n          }\n        })(), /*#__PURE__*/React.createElement(\"span\", {\n          className: clsx('align-middle sidenavHoverShow', classes.itemText),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }\n        }, item.name), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"mx-auto\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }\n        }), item.badge && /*#__PURE__*/React.createElement(\"div\", {\n          className: \"rounded bg-\".concat(item.badge.color, \" px-1 py-1px\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 33\n          }\n        }, item.badge.value)));\n      } else {\n        return /*#__PURE__*/React.createElement(NavLink, {\n          key: index,\n          to: item.path,\n          activeClassName: classes.navItemActive,\n          className: clsx({\n            'flex justify-between h-44 border-radius-4 mb-2 compactNavItem whitespace-pre overflow-hidden': true,\n            [classes.navItem]: true,\n            [classes.compactNavItem]: mode === 'compact'\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(TouchRipple, {\n          key: item.name,\n          name: \"child\",\n          className: \"w-full\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }\n        }, (item === null || item === void 0 ? void 0 : item.icon) ? /*#__PURE__*/React.createElement(Icon, {\n          className: \"text-18 align-middle w-36 px-4\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 33\n          }\n        }, item.icon) : /*#__PURE__*/React.createElement(Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: clsx({\n            'nav-bullet p-2px rounded ml-6 mr-2': true,\n            [classes.bulletIcon]: true,\n            hidden: mode === 'compact'\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 37\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: clsx({\n            'nav-bullet-text ml-5 text-11': true,\n            hidden: mode !== 'compact'\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 37\n          }\n        }, item.iconText)), /*#__PURE__*/React.createElement(\"span\", {\n          className: clsx('align-middle text-left sidenavHoverShow', classes.itemText),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }\n        }, item.name), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"mx-auto\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 29\n          }\n        }), item.badge && /*#__PURE__*/React.createElement(\"div\", {\n          className: clsx(\"rounded bg-\".concat(item.badge.color, \" px-1 py-1px\"), 'sidenavHoverShow', classes.itemIcon),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 33\n          }\n        }, item.badge.value)));\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"navigation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 12\n    }\n  }, renderLevels(items));\n};\n\nexport default React.memo(MatxVerticalNav);","map":{"version":3,"sources":["/home/harryji/react/matx-react/src/app/components/MatxVerticalNav/MatxVerticalNav.jsx"],"names":["React","Fragment","NavLink","Icon","TouchRipple","MatxVerticalNavExpansionPanel","makeStyles","clsx","useSettings","useStyles","palette","theme","navItem","transition","backgroundColor","action","hover","navItemActive","selected","compactNavItem","overflow","justifyContent","display","itemIcon","itemText","fontSize","paddingLeft","label","color","text","secondary","bulletIcon","background","MatxVerticalNav","items","settings","mode","layout1Settings","leftSidebar","classes","renderLevels","data","map","item","index","type","hidden","children","path","name","icon","iconText","badge","value","memo"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Icon } from '@material-ui/core'\nimport TouchRipple from '@material-ui/core/ButtonBase'\nimport MatxVerticalNavExpansionPanel from './MatxVerticalNavExpansionPanel'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport useSettings from 'app/hooks/useSettings'\n\nconst useStyles = makeStyles(({ palette, ...theme }) => ({\n    navItem: {\n        transition: 'all 150ms ease-in',\n        '&:hover': {\n            backgroundColor: palette.action.hover,\n        },\n    },\n    navItemActive: {\n        backgroundColor: palette.action.selected,\n    },\n    compactNavItem: {\n        overflow: 'hidden',\n        justifyContent: 'center !important',\n        '& $itemText': {\n            display: 'none',\n        },\n        '& $itemIcon': {\n            display: 'none',\n        },\n    },\n    itemIcon: {},\n    itemText: {\n        fontSize: '0.875rem',\n        paddingLeft: '0.8rem',\n    },\n    label: {\n        color: palette.text.secondary,\n    },\n    bulletIcon: {\n        background: palette.text.secondary,\n    },\n}))\n\nconst MatxVerticalNav = ({ items }) => {\n    const { settings } = useSettings()\n    const { mode } = settings.layout1Settings.leftSidebar\n    const classes = useStyles()\n\n    const renderLevels = (data) => {\n        return data.map((item, index) => {\n            if (item.type === 'label')\n                return (\n                    <p\n                        key={index}\n                        className={clsx({\n                            'px-4 mb-2 mt-6 uppercase text-12 sidenavHoverShow': true,\n                            [classes.label]: true,\n                            hidden: mode === 'compact',\n                        })}\n                    >\n                        {item.label}\n                    </p>\n                )\n            if (item.children) {\n                return (\n                    <MatxVerticalNavExpansionPanel\n                        mode={mode}\n                        item={item}\n                        key={index}\n                    >\n                        {renderLevels(item.children)}\n                    </MatxVerticalNavExpansionPanel>\n                )\n            } else if (item.type === 'extLink') {\n                return (\n                    <a\n                        key={index}\n                        href={item.path}\n                        className={clsx({\n                            'flex justify-between h-44 border-radius-4 mb-2 compactNavItem whitespace-pre overflow-hidden': true,\n                            [classes.navItem]: true,\n                            [classes.compactNavItem]: mode === 'compact',\n                        })}\n                        rel=\"noopener noreferrer\"\n                        target=\"_blank\"\n                    >\n                        <TouchRipple\n                            key={item.name}\n                            name=\"child\"\n                            className=\"w-full\"\n                        >\n                            {(() => {\n                                if (item.icon) {\n                                    return (\n                                        <Icon className=\"text-18 align-middle px-4\">\n                                            {item.icon}\n                                        </Icon>\n                                    )\n                                } else {\n                                    return (\n                                        <span className=\"item-icon icon-text\">\n                                            {item.iconText}\n                                        </span>\n                                    )\n                                }\n                            })()}\n                            <span\n                                className={clsx(\n                                    'align-middle sidenavHoverShow',\n                                    classes.itemText\n                                )}\n                            >\n                                {item.name}\n                            </span>\n                            <div className=\"mx-auto\"></div>\n                            {item.badge && (\n                                <div\n                                    className={`rounded bg-${item.badge.color} px-1 py-1px`}\n                                >\n                                    {item.badge.value}\n                                </div>\n                            )}\n                        </TouchRipple>\n                    </a>\n                )\n            } else {\n                return (\n                    <NavLink\n                        key={index}\n                        to={item.path}\n                        activeClassName={classes.navItemActive}\n                        className={clsx({\n                            'flex justify-between h-44 border-radius-4 mb-2 compactNavItem whitespace-pre overflow-hidden': true,\n                            [classes.navItem]: true,\n                            [classes.compactNavItem]: mode === 'compact',\n                        })}\n                    >\n                        <TouchRipple\n                            key={item.name}\n                            name=\"child\"\n                            className=\"w-full\"\n                        >\n                            {item?.icon ? (\n                                <Icon className=\"text-18 align-middle w-36 px-4\">\n                                    {item.icon}\n                                </Icon>\n                            ) : (\n                                <Fragment>\n                                    <div\n                                        className={clsx({\n                                            'nav-bullet p-2px rounded ml-6 mr-2': true,\n                                            [classes.bulletIcon]: true,\n                                            hidden: mode === 'compact',\n                                        })}\n                                    ></div>\n                                    <div\n                                        className={clsx({\n                                            'nav-bullet-text ml-5 text-11': true,\n                                            hidden: mode !== 'compact',\n                                        })}\n                                    >\n                                        {item.iconText}\n                                    </div>\n                                </Fragment>\n                            )}\n                            <span\n                                className={clsx(\n                                    'align-middle text-left sidenavHoverShow',\n                                    classes.itemText\n                                )}\n                            >\n                                {item.name}\n                            </span>\n                            <div className=\"mx-auto\"></div>\n                            {item.badge && (\n                                <div\n                                    className={clsx(\n                                        `rounded bg-${item.badge.color} px-1 py-1px`,\n                                        'sidenavHoverShow',\n                                        classes.itemIcon\n                                    )}\n                                >\n                                    {item.badge.value}\n                                </div>\n                            )}\n                        </TouchRipple>\n                    </NavLink>\n                )\n            }\n        })\n    }\n\n    return <div className=\"navigation\">{renderLevels(items)}</div>\n}\n\nexport default React.memo(MatxVerticalNav)\n"]},"metadata":{},"sourceType":"module"}