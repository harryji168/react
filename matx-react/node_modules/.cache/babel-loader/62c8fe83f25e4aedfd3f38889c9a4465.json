{"ast":null,"code":"import Mock from '../mock';\nimport jwt from 'jsonwebtoken';\nconst JWT_SECRET = 'jwt_secret_key';\nconst JWT_VALIDITY = '7 days';\nconst userList = [{\n  id: 1,\n  role: 'SA',\n  name: 'Jason Alexander',\n  username: 'jason_alexander',\n  email: 'jason@ui-lib.com',\n  avatar: '/assets/images/face-6.jpg',\n  age: 25\n}]; // FOLLOWING CODES ARE MOCK SERVER IMPLEMENTATION\n// YOU NEED TO BUILD YOUR OWN SERVER\n// IF YOU NEED HELP ABOUT SERVER SIDE IMPLEMENTATION\n// CONTACT US AT support@ui-lib.com\n\nMock.onPost('/api/auth/login').reply(async config => {\n  try {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const {\n      email\n    } = JSON.parse(config.data);\n    const user = userList.find(u => u.email === email);\n\n    if (!user) {\n      return [400, {\n        message: 'Invalid email or password'\n      }];\n    }\n\n    const accessToken = jwt.sign({\n      userId: user.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_VALIDITY\n    });\n    return [200, {\n      accessToken,\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});\nMock.onPost('/api/auth/register').reply(config => {\n  try {\n    const {\n      email,\n      username\n    } = JSON.parse(config.data);\n    const user = userList.find(u => u.email === email);\n\n    if (user) {\n      return [400, {\n        message: 'User already exists!'\n      }];\n    }\n\n    const newUser = {\n      id: 2,\n      role: 'GUEST',\n      name: '',\n      username: username,\n      email: email,\n      avatar: '/assets/images/face-6.jpg',\n      age: 25\n    };\n    userList.push(newUser);\n    const accessToken = jwt.sign({\n      userId: newUser.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_VALIDITY\n    });\n    return [200, {\n      accessToken,\n      user: {\n        id: newUser.id,\n        avatar: newUser.avatar,\n        email: newUser.email,\n        name: newUser.name,\n        username: newUser.username,\n        role: newUser.role\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});\nMock.onGet('/api/auth/profile').reply(config => {\n  try {\n    const {\n      Authorization\n    } = config.headers;\n    console.log(config.headers);\n\n    if (!Authorization) {\n      return [401, {\n        message: 'Invalid Authorization token'\n      }];\n    }\n\n    const accessToken = Authorization.split(' ')[1];\n    const {\n      userId\n    } = jwt.verify(accessToken, JWT_SECRET);\n    const user = userList.find(u => u.id === userId);\n\n    if (!user) {\n      return [401, {\n        message: 'Invalid authorization token'\n      }];\n    }\n\n    return [200, {\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});","map":{"version":3,"sources":["/home/harryji/react/matx-react/src/fake-db/db/auth.js"],"names":["Mock","jwt","JWT_SECRET","JWT_VALIDITY","userList","id","role","name","username","email","avatar","age","onPost","reply","config","Promise","resolve","setTimeout","JSON","parse","data","user","find","u","message","accessToken","sign","userId","expiresIn","err","console","error","newUser","push","onGet","Authorization","headers","log","split","verify"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,MAAMC,UAAU,GAAG,gBAAnB;AACA,MAAMC,YAAY,GAAG,QAArB;AAEA,MAAMC,QAAQ,GAAG,CACb;AACIC,EAAAA,EAAE,EAAE,CADR;AAEIC,EAAAA,IAAI,EAAE,IAFV;AAGIC,EAAAA,IAAI,EAAE,iBAHV;AAIIC,EAAAA,QAAQ,EAAE,iBAJd;AAKIC,EAAAA,KAAK,EAAE,kBALX;AAMIC,EAAAA,MAAM,EAAE,2BANZ;AAOIC,EAAAA,GAAG,EAAE;AAPT,CADa,CAAjB,C,CAYA;AACA;AACA;AACA;;AAEAX,IAAI,CAACY,MAAL,CAAY,iBAAZ,EAA+BC,KAA/B,CAAqC,MAAOC,MAAP,IAAkB;AACnD,MAAI;AACA,UAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAnC,CAAN;AAEA,UAAM;AAAEP,MAAAA;AAAF,QAAYS,IAAI,CAACC,KAAL,CAAWL,MAAM,CAACM,IAAlB,CAAlB;AACA,UAAMC,IAAI,GAAGjB,QAAQ,CAACkB,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAACd,KAAF,KAAYA,KAAjC,CAAb;;AAEA,QAAI,CAACY,IAAL,EAAW;AACP,aAAO,CAAC,GAAD,EAAM;AAAEG,QAAAA,OAAO,EAAE;AAAX,OAAN,CAAP;AACH;;AACD,UAAMC,WAAW,GAAGxB,GAAG,CAACyB,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAEN,IAAI,CAAChB;AAAf,KAAT,EAA8BH,UAA9B,EAA0C;AAC1D0B,MAAAA,SAAS,EAAEzB;AAD+C,KAA1C,CAApB;AAIA,WAAO,CACH,GADG,EAEH;AACIsB,MAAAA,WADJ;AAEIJ,MAAAA,IAAI,EAAE;AACFhB,QAAAA,EAAE,EAAEgB,IAAI,CAAChB,EADP;AAEFK,QAAAA,MAAM,EAAEW,IAAI,CAACX,MAFX;AAGFD,QAAAA,KAAK,EAAEY,IAAI,CAACZ,KAHV;AAIFF,QAAAA,IAAI,EAAEc,IAAI,CAACd,IAJT;AAKFD,QAAAA,IAAI,EAAEe,IAAI,CAACf;AALT;AAFV,KAFG,CAAP;AAaH,GA1BD,CA0BE,OAAOuB,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,WAAO,CAAC,GAAD,EAAM;AAAEL,MAAAA,OAAO,EAAE;AAAX,KAAN,CAAP;AACH;AACJ,CA/BD;AAiCAxB,IAAI,CAACY,MAAL,CAAY,oBAAZ,EAAkCC,KAAlC,CAAyCC,MAAD,IAAY;AAChD,MAAI;AACA,UAAM;AAAEL,MAAAA,KAAF;AAASD,MAAAA;AAAT,QAAsBU,IAAI,CAACC,KAAL,CAAWL,MAAM,CAACM,IAAlB,CAA5B;AACA,UAAMC,IAAI,GAAGjB,QAAQ,CAACkB,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAACd,KAAF,KAAYA,KAAjC,CAAb;;AAEA,QAAIY,IAAJ,EAAU;AACN,aAAO,CAAC,GAAD,EAAM;AAAEG,QAAAA,OAAO,EAAE;AAAX,OAAN,CAAP;AACH;;AACD,UAAMQ,OAAO,GAAG;AACZ3B,MAAAA,EAAE,EAAE,CADQ;AAEZC,MAAAA,IAAI,EAAE,OAFM;AAGZC,MAAAA,IAAI,EAAE,EAHM;AAIZC,MAAAA,QAAQ,EAAEA,QAJE;AAKZC,MAAAA,KAAK,EAAEA,KALK;AAMZC,MAAAA,MAAM,EAAE,2BANI;AAOZC,MAAAA,GAAG,EAAE;AAPO,KAAhB;AASAP,IAAAA,QAAQ,CAAC6B,IAAT,CAAcD,OAAd;AAEA,UAAMP,WAAW,GAAGxB,GAAG,CAACyB,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAEK,OAAO,CAAC3B;AAAlB,KAAT,EAAiCH,UAAjC,EAA6C;AAC7D0B,MAAAA,SAAS,EAAEzB;AADkD,KAA7C,CAApB;AAIA,WAAO,CACH,GADG,EAEH;AACIsB,MAAAA,WADJ;AAEIJ,MAAAA,IAAI,EAAE;AACFhB,QAAAA,EAAE,EAAE2B,OAAO,CAAC3B,EADV;AAEFK,QAAAA,MAAM,EAAEsB,OAAO,CAACtB,MAFd;AAGFD,QAAAA,KAAK,EAAEuB,OAAO,CAACvB,KAHb;AAIFF,QAAAA,IAAI,EAAEyB,OAAO,CAACzB,IAJZ;AAKFC,QAAAA,QAAQ,EAAEwB,OAAO,CAACxB,QALhB;AAMFF,QAAAA,IAAI,EAAE0B,OAAO,CAAC1B;AANZ;AAFV,KAFG,CAAP;AAcH,GApCD,CAoCE,OAAOuB,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,WAAO,CAAC,GAAD,EAAM;AAAEL,MAAAA,OAAO,EAAE;AAAX,KAAN,CAAP;AACH;AACJ,CAzCD;AA2CAxB,IAAI,CAACkC,KAAL,CAAW,mBAAX,EAAgCrB,KAAhC,CAAuCC,MAAD,IAAY;AAC9C,MAAI;AACA,UAAM;AAAEqB,MAAAA;AAAF,QAAoBrB,MAAM,CAACsB,OAAjC;AACAN,IAAAA,OAAO,CAACO,GAAR,CAAYvB,MAAM,CAACsB,OAAnB;;AACA,QAAI,CAACD,aAAL,EAAoB;AAChB,aAAO,CAAC,GAAD,EAAM;AAAEX,QAAAA,OAAO,EAAE;AAAX,OAAN,CAAP;AACH;;AAED,UAAMC,WAAW,GAAGU,aAAa,CAACG,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAApB;AACA,UAAM;AAAEX,MAAAA;AAAF,QAAa1B,GAAG,CAACsC,MAAJ,CAAWd,WAAX,EAAwBvB,UAAxB,CAAnB;AACA,UAAMmB,IAAI,GAAGjB,QAAQ,CAACkB,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAAClB,EAAF,KAASsB,MAA9B,CAAb;;AAEA,QAAI,CAACN,IAAL,EAAW;AACP,aAAO,CAAC,GAAD,EAAM;AAAEG,QAAAA,OAAO,EAAE;AAAX,OAAN,CAAP;AACH;;AAED,WAAO,CACH,GADG,EAEH;AACIH,MAAAA,IAAI,EAAE;AACFhB,QAAAA,EAAE,EAAEgB,IAAI,CAAChB,EADP;AAEFK,QAAAA,MAAM,EAAEW,IAAI,CAACX,MAFX;AAGFD,QAAAA,KAAK,EAAEY,IAAI,CAACZ,KAHV;AAIFF,QAAAA,IAAI,EAAEc,IAAI,CAACd,IAJT;AAKFD,QAAAA,IAAI,EAAEe,IAAI,CAACf;AALT;AADV,KAFG,CAAP;AAYH,GA3BD,CA2BE,OAAOuB,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,WAAO,CAAC,GAAD,EAAM;AAAEL,MAAAA,OAAO,EAAE;AAAX,KAAN,CAAP;AACH;AACJ,CAhCD","sourcesContent":["import Mock from '../mock'\nimport jwt from 'jsonwebtoken'\n\nconst JWT_SECRET = 'jwt_secret_key'\nconst JWT_VALIDITY = '7 days'\n\nconst userList = [\n    {\n        id: 1,\n        role: 'SA',\n        name: 'Jason Alexander',\n        username: 'jason_alexander',\n        email: 'jason@ui-lib.com',\n        avatar: '/assets/images/face-6.jpg',\n        age: 25,\n    },\n]\n\n// FOLLOWING CODES ARE MOCK SERVER IMPLEMENTATION\n// YOU NEED TO BUILD YOUR OWN SERVER\n// IF YOU NEED HELP ABOUT SERVER SIDE IMPLEMENTATION\n// CONTACT US AT support@ui-lib.com\n\nMock.onPost('/api/auth/login').reply(async (config) => {\n    try {\n        await new Promise((resolve) => setTimeout(resolve, 1000))\n\n        const { email } = JSON.parse(config.data)\n        const user = userList.find((u) => u.email === email)\n\n        if (!user) {\n            return [400, { message: 'Invalid email or password' }]\n        }\n        const accessToken = jwt.sign({ userId: user.id }, JWT_SECRET, {\n            expiresIn: JWT_VALIDITY,\n        })\n\n        return [\n            200,\n            {\n                accessToken,\n                user: {\n                    id: user.id,\n                    avatar: user.avatar,\n                    email: user.email,\n                    name: user.name,\n                    role: user.role,\n                },\n            },\n        ]\n    } catch (err) {\n        console.error(err)\n        return [500, { message: 'Internal server error' }]\n    }\n})\n\nMock.onPost('/api/auth/register').reply((config) => {\n    try {\n        const { email, username } = JSON.parse(config.data)\n        const user = userList.find((u) => u.email === email)\n\n        if (user) {\n            return [400, { message: 'User already exists!' }]\n        }\n        const newUser = {\n            id: 2,\n            role: 'GUEST',\n            name: '',\n            username: username,\n            email: email,\n            avatar: '/assets/images/face-6.jpg',\n            age: 25,\n        }\n        userList.push(newUser)\n\n        const accessToken = jwt.sign({ userId: newUser.id }, JWT_SECRET, {\n            expiresIn: JWT_VALIDITY,\n        })\n\n        return [\n            200,\n            {\n                accessToken,\n                user: {\n                    id: newUser.id,\n                    avatar: newUser.avatar,\n                    email: newUser.email,\n                    name: newUser.name,\n                    username: newUser.username,\n                    role: newUser.role,\n                },\n            },\n        ]\n    } catch (err) {\n        console.error(err)\n        return [500, { message: 'Internal server error' }]\n    }\n})\n\nMock.onGet('/api/auth/profile').reply((config) => {\n    try {\n        const { Authorization } = config.headers\n        console.log(config.headers)\n        if (!Authorization) {\n            return [401, { message: 'Invalid Authorization token' }]\n        }\n\n        const accessToken = Authorization.split(' ')[1]\n        const { userId } = jwt.verify(accessToken, JWT_SECRET)\n        const user = userList.find((u) => u.id === userId)\n\n        if (!user) {\n            return [401, { message: 'Invalid authorization token' }]\n        }\n\n        return [\n            200,\n            {\n                user: {\n                    id: user.id,\n                    avatar: user.avatar,\n                    email: user.email,\n                    name: user.name,\n                    role: user.role,\n                },\n            },\n        ]\n    } catch (err) {\n        console.error(err)\n        return [500, { message: 'Internal server error' }]\n    }\n})\n"]},"metadata":{},"sourceType":"module"}